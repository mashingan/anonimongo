Connection	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/core/pool.html#Connection	pool: Connection	
Pool	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/core/pool.html#Pool	pool: Pool	
connections	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/core/pool.html#connections,Pool	pool: connections(p: Pool): lent TableRef[int, Connection]	
initConnection	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/core/pool.html#initConnection,int	pool: initConnection(id = 0): Connection	
contains	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/core/pool.html#contains,Pool,int	pool: contains(p: Pool; i: int): bool	
`[]`	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/core/pool.html#[],Pool,int	pool: `[]`(p: Pool; i: int): lent Connection	
`[]=`	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/core/pool.html#[]=,Pool,int,Connection	pool: `[]=`(p: Pool; i: int; c: Connection)	
initPool	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/core/pool.html#initPool,int	pool: initPool(size = 16): Pool	
getConn	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/core/pool.html#getConn,Pool	pool: getConn(p: Pool): Future[(int, Connection)]	
connect	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/core/pool.html#connect,Pool,string,int	pool: connect(p: Pool; address: string; port: int): owned(Future[void])	
close	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/core/pool.html#close,Pool	pool: close(p: Pool)	
endConn	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/core/pool.html#endConn,Pool,Positive	pool: endConn(p: Pool; i: Positive)	
authenticate	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/core/pool.html#authenticate,Pool,string,string,typedesc,string	pool: authenticate(p: Pool; user, pass: string; T: typedesc = Sha256Digest;\n             dbname = &quot;admin.$cmd&quot;): Future[bool]	
