isMaster	anonimongo/dbops/replication.html#isMaster,Database	replication: isMaster(db: Database; cmd = bson()): Future[BsonDocument]	
replSetAbortPrimaryCatchUp	anonimongo/dbops/replication.html#replSetAbortPrimaryCatchUp,Database	replication: replSetAbortPrimaryCatchUp(db: Database): Future[BsonDocument]	
replSetFreeze	anonimongo/dbops/replication.html#replSetFreeze,Database,int	replication: replSetFreeze(db: Database; seconds: int): Future[BsonDocument]	
replSetGetConfig	anonimongo/dbops/replication.html#replSetGetConfig,Database,bool	replication: replSetGetConfig(db: Database; commitmentStatus: bool; comment = bsonNull()): Future[\n    BsonDocument]	
replSetGetStatus	anonimongo/dbops/replication.html#replSetGetStatus,Database	replication: replSetGetStatus(db: Database): Future[BsonDocument]	
replSetInitiate	anonimongo/dbops/replication.html#replSetInitiate,Database,BsonDocument	replication: replSetInitiate(db: Database; config: BsonDocument): Future[BsonDocument]	
replSetMaintenance	anonimongo/dbops/replication.html#replSetMaintenance,Database,bool	replication: replSetMaintenance(db: Database; enable: bool): Future[BsonDocument]	
replSetReconfig	anonimongo/dbops/replication.html#replSetReconfig,Database,BsonDocument,bool,int	replication: replSetReconfig(db: Database; newconfig: BsonDocument; force: bool;\n                maxTimeMS: int = -1): Future[BsonDocument]	
replSetResizeOplog	anonimongo/dbops/replication.html#replSetResizeOplog,Database,float,float	replication: replSetResizeOplog(db: Database; size: float; minRetentionHours = 0.0): Future[\n    BsonDocument]	
replSetStepDown	anonimongo/dbops/replication.html#replSetStepDown,Database,int,int	replication: replSetStepDown(db: Database; stepDown: int; catchup = 10; force = false): Future[\n    BsonDocument]	
replSetSyncFrom	anonimongo/dbops/replication.html#replSetSyncFrom,Database,string	replication: replSetSyncFrom(db: Database; hostport: string): Future[BsonDocument]	
