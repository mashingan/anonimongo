create	anonimongo/dbops/admmgmt.html#create,Database[Socket],string,(bool, int, int),string,string,string,int	admmgmt: create(db: Database[Socket]; name: string; capsizemax = (false, 0, 0);\n       storageEngine = bsonNull(); validator = bsonNull();\n       validationLevel = &quot;strict&quot;; validationAction = &quot;error&quot;;\n       indexOptionDefaults = bsonNull(); viewOn = &quot;&quot;; pipeline = bsonArray();\n       collation = bsonNull(); writeConcern = bsonNull();\n       expireAfterSeconds = 0; timeseries = bsonNull()): WriteResult	
create	anonimongo/dbops/admmgmt.html#create,Database[AsyncSocket],string,(bool, int, int),string,string,string,int	admmgmt: create(db: Database[AsyncSocket]; name: string; capsizemax = (false, 0, 0);\n       storageEngine = bsonNull(); validator = bsonNull();\n       validationLevel = &quot;strict&quot;; validationAction = &quot;error&quot;;\n       indexOptionDefaults = bsonNull(); viewOn = &quot;&quot;; pipeline = bsonArray();\n       collation = bsonNull(); writeConcern = bsonNull();\n       expireAfterSeconds = 0; timeseries = bsonNull()): Future[WriteResult]	
createIndexes	anonimongo/dbops/admmgmt.html#createIndexes,Database[Socket],string,BsonBase	admmgmt: createIndexes(db: Database[Socket]; coll: string; indexes: BsonBase;\n              writeConcern = bsonNull(); commitQuorum = bsonNull();\n              comment = bsonNull()): WriteResult	
createIndexes	anonimongo/dbops/admmgmt.html#createIndexes,Database[AsyncSocket],string,BsonBase	admmgmt: createIndexes(db: Database[AsyncSocket]; coll: string; indexes: BsonBase;\n              writeConcern = bsonNull(); commitQuorum = bsonNull();\n              comment = bsonNull()): Future[WriteResult]	
dropCollection	anonimongo/dbops/admmgmt.html#dropCollection,Database[Socket],string	admmgmt: dropCollection(db: Database[Socket]; coll: string; wt = bsonNull();\n               comment = bsonNull()): WriteResult	
dropCollection	anonimongo/dbops/admmgmt.html#dropCollection,Database[AsyncSocket],string	admmgmt: dropCollection(db: Database[AsyncSocket]; coll: string; wt = bsonNull();\n               comment = bsonNull()): Future[WriteResult]	
dropDatabase	anonimongo/dbops/admmgmt.html#dropDatabase,Database[Socket]	admmgmt: dropDatabase(db: Database[Socket]; wt = bsonNull(); comment = bsonNull()): WriteResult	
dropDatabase	anonimongo/dbops/admmgmt.html#dropDatabase,Database[AsyncSocket]	admmgmt: dropDatabase(db: Database[AsyncSocket]; wt = bsonNull(); comment = bsonNull()): Future[\n    WriteResult]	
dropIndexes	anonimongo/dbops/admmgmt.html#dropIndexes,Database[Socket],string,BsonBase	admmgmt: dropIndexes(db: Database[Socket]; coll: string; indexes: BsonBase;\n            wt = bsonNull(); comment = bsonNull()): WriteResult	
dropIndexes	anonimongo/dbops/admmgmt.html#dropIndexes,Database[AsyncSocket],string,BsonBase	admmgmt: dropIndexes(db: Database[AsyncSocket]; coll: string; indexes: BsonBase;\n            wt = bsonNull(); comment = bsonNull()): Future[WriteResult]	
listCollections	anonimongo/dbops/admmgmt.html#listCollections,Database[Socket],string	admmgmt: listCollections(db: Database[Socket]; dbname = &quot;&quot;; filter = bsonNull();\n                nameonly = false; authorizedCollections = false;\n                comment = bsonNull()): seq[BsonBase]	
listCollections	anonimongo/dbops/admmgmt.html#listCollections,Database[AsyncSocket],string	admmgmt: listCollections(db: Database[AsyncSocket]; dbname = &quot;&quot;; filter = bsonNull();\n                nameonly = false; authorizedCollections = false;\n                comment = bsonNull()): Future[seq[BsonBase]]	
listCollectionNames	anonimongo/dbops/admmgmt.html#listCollectionNames,Database[Socket],string	admmgmt: listCollectionNames(db: Database[Socket]; dbname = &quot;&quot;): seq[string]	
listCollectionNames	anonimongo/dbops/admmgmt.html#listCollectionNames,Database[AsyncSocket],string	admmgmt: listCollectionNames(db: Database[AsyncSocket]; dbname = &quot;&quot;): Future[seq[string]]	
listDatabases	anonimongo/dbops/admmgmt.html#listDatabases,Database[Socket]	admmgmt: listDatabases(db: Database[Socket]; filter = bsonNull(); nameonly = false;\n              authorizedCollections = false; comment = bsonNull()): seq[BsonBase]	
listDatabases	anonimongo/dbops/admmgmt.html#listDatabases,Database[AsyncSocket]	admmgmt: listDatabases(db: Database[AsyncSocket]; filter = bsonNull(); nameonly = false;\n              authorizedCollections = false; comment = bsonNull()): Future[\n    seq[BsonBase]]	
listDatabaseNames	anonimongo/dbops/admmgmt.html#listDatabaseNames,Database[Socket]	admmgmt: listDatabaseNames(db: Database[Socket]): seq[string]	
listDatabaseNames	anonimongo/dbops/admmgmt.html#listDatabaseNames,Database[AsyncSocket]	admmgmt: listDatabaseNames(db: Database[AsyncSocket]): Future[seq[string]]	
listIndexes	anonimongo/dbops/admmgmt.html#listIndexes,Database[Socket],string	admmgmt: listIndexes(db: Database[Socket]; coll: string; comment = bsonNull()): seq[\n    BsonBase]	
listIndexes	anonimongo/dbops/admmgmt.html#listIndexes,Database[AsyncSocket],string	admmgmt: listIndexes(db: Database[AsyncSocket]; coll: string; comment = bsonNull()): Future[\n    seq[BsonBase]]	
renameCollection	anonimongo/dbops/admmgmt.html#renameCollection,Database[Socket],string,string	admmgmt: renameCollection(db: Database[Socket]; from, to: string; wt = bsonNull();\n                 comment = bsonNull()): WriteResult	
renameCollection	anonimongo/dbops/admmgmt.html#renameCollection,Database[AsyncSocket],string,string	admmgmt: renameCollection(db: Database[AsyncSocket]; from, to: string; wt = bsonNull();\n                 comment = bsonNull()): Future[WriteResult]	
shutdown	anonimongo/dbops/admmgmt.html#shutdown,Database[Socket],int	admmgmt: shutdown(db: Database[Socket]; force = false; timeout = 10; comment = bsonNull()): WriteResult	
shutdown	anonimongo/dbops/admmgmt.html#shutdown,Database[AsyncSocket],int	admmgmt: shutdown(db: Database[AsyncSocket]; force = false; timeout = 10;\n         comment = bsonNull()): Future[WriteResult]	
shutdown	anonimongo/dbops/admmgmt.html#shutdown,Mongo[Socket],int	admmgmt: shutdown(m: Mongo[Socket]; force = false; timeout = 10; comment = bsonNull()): WriteResult	
shutdown	anonimongo/dbops/admmgmt.html#shutdown,Mongo[AsyncSocket],int	admmgmt: shutdown(m: Mongo[AsyncSocket]; force = false; timeout = 10;\n         comment = bsonNull()): Future[WriteResult]	
currentOp	anonimongo/dbops/admmgmt.html#currentOp,Database[Socket]	admmgmt: currentOp(db: Database[Socket]; opt = bson()): BsonDocument	
currentOp	anonimongo/dbops/admmgmt.html#currentOp,Database[AsyncSocket]	admmgmt: currentOp(db: Database[AsyncSocket]; opt = bson()): Future[BsonDocument]	
killOp	anonimongo/dbops/admmgmt.html#killOp,Database[Socket],int32	admmgmt: killOp(db: Database[Socket]; opid: int32; comment = bsonNull()): WriteResult	
killOp	anonimongo/dbops/admmgmt.html#killOp,Database[AsyncSocket],int32	admmgmt: killOp(db: Database[AsyncSocket]; opid: int32; comment = bsonNull()): Future[\n    WriteResult]	
killCursors	anonimongo/dbops/admmgmt.html#killCursors,Database[Socket],string,seq[int64]	admmgmt: killCursors(db: Database[Socket]; collname: string; cursorIds: seq[int64]): BsonDocument	
killCursors	anonimongo/dbops/admmgmt.html#killCursors,Database[AsyncSocket],string,seq[int64]	admmgmt: killCursors(db: Database[AsyncSocket]; collname: string; cursorIds: seq[int64]): Future[\n    BsonDocument]	
setDefaultRWConcern	anonimongo/dbops/admmgmt.html#setDefaultRWConcern,Database[Socket]	admmgmt: setDefaultRWConcern(db: Database[Socket]; defaultReadConcern = bsonNull();\n                    defaultWriteConcern = bsonNull(); wt = bsonNull();\n                    comment = bsonNull()): BsonDocument	
setDefaultRWConcern	anonimongo/dbops/admmgmt.html#setDefaultRWConcern,Database[AsyncSocket]	admmgmt: setDefaultRWConcern(db: Database[AsyncSocket]; defaultReadConcern = bsonNull();\n                    defaultWriteConcern = bsonNull(); wt = bsonNull();\n                    comment = bsonNull()): Future[BsonDocument]	
getDefaultReadConcern	anonimongo/dbops/admmgmt.html#getDefaultReadConcern,Database[Socket]	admmgmt: getDefaultReadConcern(db: Database[Socket]; inMemory = false;\n                      comment = bsonNull()): BsonDocument	
getDefaultReadConcern	anonimongo/dbops/admmgmt.html#getDefaultReadConcern,Database[AsyncSocket]	admmgmt: getDefaultReadConcern(db: Database[AsyncSocket]; inMemory = false;\n                      comment = bsonNull()): Future[BsonDocument]	
Administration Commands	anonimongo/dbops/admmgmt.html#administration-commands	 Administration Commands	
