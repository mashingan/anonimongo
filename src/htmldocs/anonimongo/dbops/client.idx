Client module and User Management Commands	anonimongo/dbops/client.html#client-module-and-user-management-commands	 Client module and User Management Commands	
anonimongoVersion	anonimongo/dbops/client.html#anonimongoVersion	client: anonimongoVersion	
connect	anonimongo/dbops/client.html#connect,Mongo[Socket]	client: connect(m: Mongo[Socket]): bool	
connect	anonimongo/dbops/client.html#connect,Mongo[AsyncSocket]	client: connect(m: Mongo[AsyncSocket]): Future[bool]	
createUser	anonimongo/dbops/client.html#createUser,Database[Socket],string,string	client: createUser(db: Database[Socket]; user, pwd: string; roles = bsonArray();\n           restrictions = bsonArray();\n           mechanism = bsonArray(&quot;SCRAM-SHA-256&quot;, &quot;SCRAM-SHA-1&quot;);\n           writeConcern = bsonNull(); customData = bsonNull()): WriteResult	
createUser	anonimongo/dbops/client.html#createUser,Database[AsyncSocket],string,string	client: createUser(db: Database[AsyncSocket]; user, pwd: string; roles = bsonArray();\n           restrictions = bsonArray();\n           mechanism = bsonArray(&quot;SCRAM-SHA-256&quot;, &quot;SCRAM-SHA-1&quot;);\n           writeConcern = bsonNull(); customData = bsonNull()): Future[\n    WriteResult]	
updateUser	anonimongo/dbops/client.html#updateUser,Database[Socket],string,string	client: updateUser(db: Database[Socket]; user, pwd: string; roles = bsonArray();\n           restrictions = bsonArray();\n           mechanism = bsonArray(&quot;SCRAM-SHA-256&quot;, &quot;SCRAM-SHA-1&quot;);\n           writeConcern = bsonNull(); customData = bsonNull()): WriteResult	
updateUser	anonimongo/dbops/client.html#updateUser,Database[AsyncSocket],string,string	client: updateUser(db: Database[AsyncSocket]; user, pwd: string; roles = bsonArray();\n           restrictions = bsonArray();\n           mechanism = bsonArray(&quot;SCRAM-SHA-256&quot;, &quot;SCRAM-SHA-1&quot;);\n           writeConcern = bsonNull(); customData = bsonNull()): Future[\n    WriteResult]	
usersInfo	anonimongo/dbops/client.html#usersInfo,Database[Socket],BsonBase	client: usersInfo(db: Database[Socket]; usersInfo: BsonBase; showCredentials = false;\n          showPrivileges = false; showAuthenticationRestictions = false;\n          filters = bson(); comment = bsonNull()): BsonDocument	
usersInfo	anonimongo/dbops/client.html#usersInfo,Database[AsyncSocket],BsonBase	client: usersInfo(db: Database[AsyncSocket]; usersInfo: BsonBase;\n          showCredentials = false; showPrivileges = false;\n          showAuthenticationRestictions = false; filters = bson();\n          comment = bsonNull()): Future[BsonDocument]	
dropAllUsersFromDatabase	anonimongo/dbops/client.html#dropAllUsersFromDatabase,Database[Socket]	client: dropAllUsersFromDatabase(db: Database[Socket]): WriteResult	
dropAllUsersFromDatabase	anonimongo/dbops/client.html#dropAllUsersFromDatabase,Database[AsyncSocket]	client: dropAllUsersFromDatabase(db: Database[AsyncSocket]): Future[WriteResult]	
dropUser	anonimongo/dbops/client.html#dropUser,Database[Socket],string	client: dropUser(db: Database[Socket]; user: string): WriteResult	
dropUser	anonimongo/dbops/client.html#dropUser,Database[AsyncSocket],string	client: dropUser(db: Database[AsyncSocket]; user: string): Future[WriteResult]	
grantRolesToUser	anonimongo/dbops/client.html#grantRolesToUser,Database[Socket],string	client: grantRolesToUser(db: Database[Socket]; user: string; roles = bsonArray();\n                 writeConcern = bsonNull()): WriteResult	
grantRolesToUser	anonimongo/dbops/client.html#grantRolesToUser,Database[AsyncSocket],string	client: grantRolesToUser(db: Database[AsyncSocket]; user: string; roles = bsonArray();\n                 writeConcern = bsonNull()): Future[WriteResult]	
revokeRolesFromUser	anonimongo/dbops/client.html#revokeRolesFromUser,Database[Socket],string	client: revokeRolesFromUser(db: Database[Socket]; user: string; roles = bsonArray();\n                    writeConcern = bsonNull()): WriteResult	
revokeRolesFromUser	anonimongo/dbops/client.html#revokeRolesFromUser,Database[AsyncSocket],string	client: revokeRolesFromUser(db: Database[AsyncSocket]; user: string;\n                    roles = bsonArray(); writeConcern = bsonNull()): Future[\n    WriteResult]	
