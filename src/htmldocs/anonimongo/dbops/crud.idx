nimTitle	crud	anonimongo/dbops/crud.html	module src/anonimongo/dbops/crud		0
nim	find	anonimongo/dbops/crud.html#find,Database[Socket],string,int,int,int,string,int,string	proc find(db: Database[Socket]; coll: string; query = bson(); sort = bsonNull();\n     selector = bsonNull(); hint = bsonNull(); skip = 0; limit = 0;\n     batchSize = 101; singleBatch = false; comment = ""; maxTimeMS = 0;\n     readConcern = bsonNull(); max = bsonNull(); min = bsonNull();\n     returnKey = false; showRecordId = false; tailable = false;\n     awaitData = false; oplogReplay = false; noCursorTimeout = false;\n     partial = false; collation = bsonNull(); explain = ""): BsonDocument		130
nim	find	anonimongo/dbops/crud.html#find,Database[AsyncSocket],string,int,int,int,string,int,string	proc find(db: Database[AsyncSocket]; coll: string; query = bson(); sort = bsonNull();\n     selector = bsonNull(); hint = bsonNull(); skip = 0; limit = 0;\n     batchSize = 101; singleBatch = false; comment = ""; maxTimeMS = 0;\n     readConcern = bsonNull(); max = bsonNull(); min = bsonNull();\n     returnKey = false; showRecordId = false; tailable = false;\n     awaitData = false; oplogReplay = false; noCursorTimeout = false;\n     partial = false; collation = bsonNull(); explain = ""): Future[BsonDocument]		39
nim	getMore	anonimongo/dbops/crud.html#getMore,Database[Socket],int64,string,int,int	proc getMore(db: Database[Socket]; cursorId: int64; collname: string; batchSize: int;\n        maxTimeMS = -1): BsonDocument		130
nim	getMore	anonimongo/dbops/crud.html#getMore,Database[AsyncSocket],int64,string,int,int	proc getMore(db: Database[AsyncSocket]; cursorId: int64; collname: string;\n        batchSize: int; maxTimeMS = -1): Future[BsonDocument]		74
nim	insert	anonimongo/dbops/crud.html#insert,Database[Socket],string,seq[BsonDocument],string	proc insert(db: Database[Socket]; coll: string; documents: seq[BsonDocument];\n       ordered = true; wt = bsonNull(); bypass = false; explain = ""): BsonDocument		130
nim	insert	anonimongo/dbops/crud.html#insert,Database[AsyncSocket],string,seq[BsonDocument],string	proc insert(db: Database[AsyncSocket]; coll: string; documents: seq[BsonDocument];\n       ordered = true; wt = bsonNull(); bypass = false; explain = ""): Future[\n    BsonDocument]		87
nim	delete	anonimongo/dbops/crud.html#delete,Database[Socket],string,seq[BsonDocument],string	proc delete(db: Database[Socket]; coll: string; deletes: seq[BsonDocument];\n       ordered = true; wt = bsonNull(); explain = ""): BsonDocument		130
nim	delete	anonimongo/dbops/crud.html#delete,Database[AsyncSocket],string,seq[BsonDocument],string	proc delete(db: Database[AsyncSocket]; coll: string; deletes: seq[BsonDocument];\n       ordered = true; wt = bsonNull(); explain = ""): Future[BsonDocument]		100
nim	update	anonimongo/dbops/crud.html#update,Database[Socket],string,seq[BsonDocument],string	proc update(db: Database[Socket]; coll: string; updates: seq[BsonDocument];\n       ordered = true; wt = bsonNull(); bypass = false; explain = ""): BsonDocument		130
nim	update	anonimongo/dbops/crud.html#update,Database[AsyncSocket],string,seq[BsonDocument],string	proc update(db: Database[AsyncSocket]; coll: string; updates: seq[BsonDocument];\n       ordered = true; wt = bsonNull(); bypass = false; explain = ""): Future[\n    BsonDocument]		112
nim	findAndModify	anonimongo/dbops/crud.html#findAndModify,Database[Socket],string,seq[BsonDocument],string	proc findAndModify(db: Database[Socket]; coll: string; query = bson();\n              sort = bsonNull(); remove = false; update = bsonNull();\n              new = false; fields = bsonNull(); upsert = false; bypass = false;\n              wt = bsonNull(); collation = bsonNull();\n              arrayFilters: seq[BsonDocument] = @[]; explain = ""): BsonDocument		130
nim	findAndModify	anonimongo/dbops/crud.html#findAndModify,Database[AsyncSocket],string,seq[BsonDocument],string	proc findAndModify(db: Database[AsyncSocket]; coll: string; query = bson();\n              sort = bsonNull(); remove = false; update = bsonNull();\n              new = false; fields = bsonNull(); upsert = false; bypass = false;\n              wt = bsonNull(); collation = bsonNull();\n              arrayFilters: seq[BsonDocument] = @[]; explain = ""): Future[\n    BsonDocument]		127
nim	getLastError	anonimongo/dbops/crud.html#getLastError,Database[Socket]	proc getLastError(db: Database[Socket]; opt = bson()): BsonDocument		130
nim	getLastError	anonimongo/dbops/crud.html#getLastError,Database[AsyncSocket]	proc getLastError(db: Database[AsyncSocket]; opt = bson()): Future[BsonDocument]		147
nimgrp	findandmodify	anonimongo/dbops/crud.html#findAndModify-procs-all	proc		123
nimgrp	getlasterror	anonimongo/dbops/crud.html#getLastError-procs-all	proc		147
nimgrp	getmore	anonimongo/dbops/crud.html#getMore-procs-all	proc		73
nimgrp	insert	anonimongo/dbops/crud.html#insert-procs-all	proc		85
nimgrp	delete	anonimongo/dbops/crud.html#delete-procs-all	proc		98
nimgrp	find	anonimongo/dbops/crud.html#find-procs-all	proc		32
nimgrp	update	anonimongo/dbops/crud.html#update-procs-all	proc		110
heading	Query and Write Operation Commands	anonimongo/dbops/crud.html#query-and-write-operation-commands	 Query and Write Operation Commands		0
