Query and Write Operation Commands	anonimongo/dbops/crud.html#query-and-write-operation-commands	 Query and Write Operation Commands	
find	anonimongo/dbops/crud.html#find,Database,string,int,int,int,string,int,string	crud: find(db: Database; coll: string; query = bson(); sort = bsonNull();\n     selector = bsonNull(); hint = bsonNull(); skip = 0; limit = 0;\n     batchSize = 101; singleBatch = false; comment = &quot;&quot;; maxTimeMS = 0;\n     readConcern = bsonNull(); max = bsonNull(); min = bsonNull();\n     returnKey = false; showRecordId = false; tailable = false;\n     awaitData = false; oplogReplay = false; noCursorTimeout = false;\n     partial = false; collation = bsonNull(); explain = &quot;&quot;): Future[BsonDocument]	
getMore	anonimongo/dbops/crud.html#getMore,Database,int64,string,int	crud: getMore(db: Database; cursorId: int64; collname: string; batchSize: int;\n        maxTimeMS = -1): Future[BsonDocument]	
insert	anonimongo/dbops/crud.html#insert,Database,string,seq[BsonDocument],string	crud: insert(db: Database; coll: string; documents: seq[BsonDocument]; ordered = true;\n       wt = bsonNull(); bypass = false; explain = &quot;&quot;): Future[BsonDocument]	
delete	anonimongo/dbops/crud.html#delete,Database,string,seq[BsonDocument],string	crud: delete(db: Database; coll: string; deletes: seq[BsonDocument]; ordered = true;\n       wt = bsonNull(); explain = &quot;&quot;): Future[BsonDocument]	
update	anonimongo/dbops/crud.html#update,Database,string,seq[BsonDocument],string	crud: update(db: Database; coll: string; updates: seq[BsonDocument]; ordered = true;\n       wt = bsonNull(); bypass = false; explain = &quot;&quot;): Future[BsonDocument]	
findAndModify	anonimongo/dbops/crud.html#findAndModify,Database,string,seq[BsonDocument],string	crud: findAndModify(db: Database; coll: string; query = bson(); sort = bsonNull();\n              remove = false; update = bsonNull(); new = false;\n              fields = bsonNull(); upsert = false; bypass = false;\n              wt = bsonNull(); collation = bsonNull();\n              arrayFilters: seq[BsonDocument] = @[]; explain = &quot;&quot;): Future[\n    BsonDocument]	
getLastError	anonimongo/dbops/crud.html#getLastError,Database	crud: getLastError(db: Database; opt = bson()): Future[BsonDocument]	
