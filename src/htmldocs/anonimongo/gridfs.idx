kilobytes	anonimongo/gridfs.html#kilobytes,Positive	gridfs: kilobytes(n: Positive): int	
megabytes	anonimongo/gridfs.html#megabytes,Positive	gridfs: megabytes(n: Positive): int	
createBucket	anonimongo/gridfs.html#createBucket,Database[Socket],string	gridfs: createBucket(db: Database[Socket]; name = &quot;fs&quot;; chunkSize = defaultChunkSize): GridFS[\n    Socket]	
createBucket	anonimongo/gridfs.html#createBucket,Database[AsyncSocket],string	gridfs: createBucket(db: Database[AsyncSocket]; name = &quot;fs&quot;;\n             chunkSize = defaultChunkSize): Future[GridFS[AsyncSocket]]	
createBucket	anonimongo/gridfs.html#createBucket,Collection[Socket],string	gridfs: createBucket(c: Collection[Socket]; name = &quot;fs&quot;; chunkSize = defaultChunkSize): GridFS[\n    Socket]	
createBucket	anonimongo/gridfs.html#createBucket,Collection[AsyncSocket],string	gridfs: createBucket(c: Collection[AsyncSocket]; name = &quot;fs&quot;;\n             chunkSize = defaultChunkSize): Future[GridFS[AsyncSocket]]	
getBucket	anonimongo/gridfs.html#getBucket,Database[Socket],string	gridfs: getBucket(db: Database[Socket]; name = &quot;fs&quot;): GridFS[Socket]	
getBucket	anonimongo/gridfs.html#getBucket,Database[AsyncSocket],string	gridfs: getBucket(db: Database[AsyncSocket]; name = &quot;fs&quot;): Future[GridFS[AsyncSocket]]	
getBucket	anonimongo/gridfs.html#getBucket,Collection[Socket],string	gridfs: getBucket(c: Collection[Socket]; name = &quot;fs&quot;): GridFS[Socket]	
getBucket	anonimongo/gridfs.html#getBucket,Collection[AsyncSocket],string	gridfs: getBucket(c: Collection[AsyncSocket]; name = &quot;fs&quot;): Future[GridFS[AsyncSocket]]	
uploadFile	anonimongo/gridfs.html#uploadFile,GridFS[Socket],AsyncFile,string,int32	gridfs: uploadFile(g: GridFS[Socket]; f: AsyncFile; filename = &quot;&quot;; chunk = 0&apos;i32;\n           metadata = bson()): WriteResult	
uploadFile	anonimongo/gridfs.html#uploadFile,GridFS[AsyncSocket],AsyncFile,string,int32	gridfs: uploadFile(g: GridFS[AsyncSocket]; f: AsyncFile; filename = &quot;&quot;; chunk = 0&apos;i32;\n           metadata = bson()): Future[WriteResult]	
uploadFile	anonimongo/gridfs.html#uploadFile,GridFS[Socket],string,int32	gridfs: uploadFile(g: GridFS[Socket]; filename: string; chunk = 0&apos;i32; metadata = bson()): WriteResult	
uploadFile	anonimongo/gridfs.html#uploadFile,GridFS[AsyncSocket],string,int32	gridfs: uploadFile(g: GridFS[AsyncSocket]; filename: string; chunk = 0&apos;i32;\n           metadata = bson()): Future[WriteResult]	
downloadFile	anonimongo/gridfs.html#downloadFile,GridFS[Socket],AsyncFile,string	gridfs: downloadFile(g: GridFS[Socket]; f: AsyncFile; filename = &quot;&quot;): WriteResult	
downloadFile	anonimongo/gridfs.html#downloadFile,GridFS[AsyncSocket],AsyncFile,string	gridfs: downloadFile(g: GridFS[AsyncSocket]; f: AsyncFile; filename = &quot;&quot;): Future[\n    WriteResult]	
downloadFile	anonimongo/gridfs.html#downloadFile,GridFS[Socket],string	gridfs: downloadFile(bucket: GridFS[Socket]; filename: string): WriteResult	
downloadFile	anonimongo/gridfs.html#downloadFile,GridFS[AsyncSocket],string	gridfs: downloadFile(bucket: GridFS[AsyncSocket]; filename: string): Future[WriteResult]	
downloadAs	anonimongo/gridfs.html#downloadAs,GridFS[Socket],string,string	gridfs: downloadAs(g: GridFS[Socket]; source, target: string): WriteResult	
downloadAs	anonimongo/gridfs.html#downloadAs,GridFS[AsyncSocket],string,string	gridfs: downloadAs(g: GridFS[AsyncSocket]; source, target: string): Future[WriteResult]	
availableFiles	anonimongo/gridfs.html#availableFiles,GridFS[Socket]	gridfs: availableFiles(g: GridFS[Socket]; query = bson()): int	
availableFiles	anonimongo/gridfs.html#availableFiles,GridFS[AsyncSocket]	gridfs: availableFiles(g: GridFS[AsyncSocket]; query = bson()): Future[int]	
listFileNames	anonimongo/gridfs.html#listFileNames,GridFS[Socket]	gridfs: listFileNames(g: GridFS[Socket]; matcher = &quot;all&quot;.toBson; sort = bson()): seq[\n    string]	
listFileNames	anonimongo/gridfs.html#listFileNames,GridFS[AsyncSocket]	gridfs: listFileNames(g: GridFS[AsyncSocket]; matcher = &quot;all&quot;.toBson; sort = bson()): Future[\n    seq[string]]	
removeFile	anonimongo/gridfs.html#removeFile,GridFS[Socket]	gridfs: removeFile(g: GridFS[Socket]; matcher = &quot;all&quot;.toBson; one = false): WriteResult	
removeFile	anonimongo/gridfs.html#removeFile,GridFS[AsyncSocket]	gridfs: removeFile(g: GridFS[AsyncSocket]; matcher = &quot;all&quot;.toBson; one = false): Future[\n    WriteResult]	
drop	anonimongo/gridfs.html#drop,GridFS[Socket]	gridfs: drop(g: GridFS[Socket]): WriteResult	
drop	anonimongo/gridfs.html#drop,GridFS[AsyncSocket]	gridfs: drop(g: GridFS[AsyncSocket]): Future[WriteResult]	
GridStream	anonimongo/gridfs.html#GridStream	gridfs: GridStream	
fileSize	anonimongo/gridfs.html#fileSize,GridStream	gridfs: fileSize(gs: GridStream): int64	
metadata	anonimongo/gridfs.html#metadata,GridStream	gridfs: metadata(gs: GridStream): BsonDocument	
close	anonimongo/gridfs.html#close,GridStream	gridfs: close(gs: GridStream)	
setPosition	anonimongo/gridfs.html#setPosition,GridStream[Socket],int64,int	gridfs: setPosition(gs: GridStream[Socket]; pos: int64; chunkn = -1)	
setPosition	anonimongo/gridfs.html#setPosition,GridStream[AsyncSocket],int64,int	gridfs: setPosition(gs: GridStream[AsyncSocket]; pos: int64; chunkn = -1): owned(\n    Future[void])	
getPosition	anonimongo/gridfs.html#getPosition,GridStream	gridfs: getPosition(gs: GridStream): int64	
read	anonimongo/gridfs.html#read,GridStream[Socket],int64	gridfs: read(gs: GridStream[Socket]; length = 0&apos;i64): string	
read	anonimongo/gridfs.html#read,GridStream[AsyncSocket],int64	gridfs: read(gs: GridStream[AsyncSocket]; length = 0&apos;i64): Future[string]	
readAll	anonimongo/gridfs.html#readAll,GridStream[Socket]	gridfs: readAll(gs: GridStream[Socket]): string	
readAll	anonimongo/gridfs.html#readAll,GridStream[AsyncSocket]	gridfs: readAll(gs: GridStream[AsyncSocket]): Future[string]	
getStream	anonimongo/gridfs.html#getStream,GridFS[Socket],BsonBase	gridfs: getStream(g: GridFS[Socket]; matcher: BsonBase; sort = bson(); buffered = false): GridStream[\n    Socket]	
getStream	anonimongo/gridfs.html#getStream,GridFS[AsyncSocket],BsonBase	gridfs: getStream(g: GridFS[AsyncSocket]; matcher: BsonBase; sort = bson();\n          buffered = false): Future[GridStream[AsyncSocket]]	
