csInsert	anonimongo/changestreams.html#csInsert	ChangeStreamEvent.csInsert	
csUpdate	anonimongo/changestreams.html#csUpdate	ChangeStreamEvent.csUpdate	
csReplace	anonimongo/changestreams.html#csReplace	ChangeStreamEvent.csReplace	
csDelete	anonimongo/changestreams.html#csDelete	ChangeStreamEvent.csDelete	
csInvalidate	anonimongo/changestreams.html#csInvalidate	ChangeStreamEvent.csInvalidate	
csDrop	anonimongo/changestreams.html#csDrop	ChangeStreamEvent.csDrop	
csDropDatabase	anonimongo/changestreams.html#csDropDatabase	ChangeStreamEvent.csDropDatabase	
csRename	anonimongo/changestreams.html#csRename	ChangeStreamEvent.csRename	
ChangeStreamEvent	anonimongo/changestreams.html#ChangeStreamEvent	changestreams: ChangeStreamEvent	
ChangeStreamId	anonimongo/changestreams.html#ChangeStreamId	changestreams: ChangeStreamId	
Namespace	anonimongo/changestreams.html#Namespace	changestreams: Namespace	
DocumentKey	anonimongo/changestreams.html#DocumentKey	changestreams: DocumentKey	
ChangeStream	anonimongo/changestreams.html#ChangeStream	changestreams: ChangeStream	
forEach	anonimongo/changestreams.html#forEach,Cursor[Socket],proc(ChangeStream),set[ChangeStreamEvent]	changestreams: forEach(c: Cursor[Socket]; cb: proc (b: ChangeStream);\n        stopWhen: set[ChangeStreamEvent]): void	
forEach	anonimongo/changestreams.html#forEach,Cursor[AsyncSocket],proc(ChangeStream),set[ChangeStreamEvent]	changestreams: forEach(c: Cursor[AsyncSocket]; cb: proc (b: ChangeStream);\n        stopWhen: set[ChangeStreamEvent]): Future[void]	
watch	anonimongo/changestreams.html#watch,Collection[Socket],seq[BsonDocument]	changestreams: watch(coll: Collection[Socket]; pipelines: seq[BsonDocument] = @[];\n      options = bson()): Cursor[Socket]	
watch	anonimongo/changestreams.html#watch,Collection[AsyncSocket],seq[BsonDocument]	changestreams: watch(coll: Collection[AsyncSocket]; pipelines: seq[BsonDocument] = @[];\n      options = bson()): Future[Cursor[AsyncSocket]]	
