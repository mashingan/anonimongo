cmd	anonimongo/core/utils.html#cmd,string	utils: cmd(name: string): string	
flags	anonimongo/core/utils.html#flags,Database	utils: flags(d: Database): int32	
sendOps	anonimongo/core/utils.html#sendOps,BsonDocument,Database[Socket],string	utils: sendOps(q: BsonDocument; db: Database[Socket]; name = &quot;&quot;; cmd = ckRead;\n        compression = cidNoop): ReplyFormat	
sendOps	anonimongo/core/utils.html#sendOps,BsonDocument,Database[AsyncSocket],string	utils: sendOps(q: BsonDocument; db: Database[AsyncSocket]; name = &quot;&quot;; cmd = ckRead;\n        compression = cidNoop): Future[ReplyFormat]	
addWriteConcern	anonimongo/core/utils.html#addWriteConcern,BsonDocument,Database,BsonBase	utils: addWriteConcern(q: var BsonDocument; db: Database; wt: BsonBase)	
addOptional	anonimongo/core/utils.html#addOptional.t,BsonDocument,string,BsonBase	utils: addOptional(q: var BsonDocument; name: string; f: BsonBase)	
addConditional	anonimongo/core/utils.html#addConditional.t,BsonDocument,string,BsonBase	utils: addConditional(q: var BsonDocument; field: string; val: BsonBase)	
epilogueCheck	anonimongo/core/utils.html#epilogueCheck,ReplyFormat,string	utils: epilogueCheck(reply: ReplyFormat; target: var string): bool	
proceed	anonimongo/core/utils.html#proceed,Database[Socket],BsonDocument,string	utils: proceed(db: Database[Socket]; q: BsonDocument; dbname = &quot;&quot;; cmd = ckRead;\n        needCompress = true): WriteResult	
proceed	anonimongo/core/utils.html#proceed,Database[AsyncSocket],BsonDocument,string	utils: proceed(db: Database[AsyncSocket]; q: BsonDocument; dbname = &quot;&quot;; cmd = ckRead;\n        needCompress = true): Future[WriteResult]	
crudops	anonimongo/core/utils.html#crudops,Database[Socket],BsonDocument,string	utils: crudops(db: Database[Socket]; q: BsonDocument; dbname = &quot;&quot;; cmd = ckRead): BsonDocument	
crudops	anonimongo/core/utils.html#crudops,Database[AsyncSocket],BsonDocument,string	utils: crudops(db: Database[AsyncSocket]; q: BsonDocument; dbname = &quot;&quot;; cmd = ckRead): Future[\n    BsonDocument]	
getWResult	anonimongo/core/utils.html#getWResult,BsonDocument	utils: getWResult(b: BsonDocument): WriteResult	
