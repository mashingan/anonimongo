Aggregation commands (and a Geospatial command)	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.6.2/anonimongo/dbops/aggregation.html#aggregation-commands-and-a-geospatial-command	 Aggregation commands (and a Geospatial command)	
aggregate	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.6.2/anonimongo/dbops/aggregation.html#aggregate,Database[Socket],string,seq[BsonDocument],int,string,string	aggregation: aggregate(db: Database[Socket]; coll: string; pipeline: seq[BsonDocument];\n          explain = false; diskuse = false; cursor = bson(); maxTimeMS = 0;\n          bypass = false; readConcern = bsonNull(); collation = bsonNull();\n          hint = bsonNull(); comment = &quot;&quot;; wt = bsonNull();\n          explainVerbosity = &quot;&quot;): BsonDocument	
aggregate	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.6.2/anonimongo/dbops/aggregation.html#aggregate,Database[AsyncSocket],string,seq[BsonDocument],int,string,string	aggregation: aggregate(db: Database[AsyncSocket]; coll: string; pipeline: seq[BsonDocument];\n          explain = false; diskuse = false; cursor = bson(); maxTimeMS = 0;\n          bypass = false; readConcern = bsonNull(); collation = bsonNull();\n          hint = bsonNull(); comment = &quot;&quot;; wt = bsonNull();\n          explainVerbosity = &quot;&quot;): Future[BsonDocument]	
count	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.6.2/anonimongo/dbops/aggregation.html#count,Database[Socket],string,int,int,string	aggregation: count(db: Database[Socket]; coll: string; query = bson(); limit = 0; skip = 0;\n      hint = bsonNull(); readConcern = bsonNull(); collation = bsonNull();\n      explain = &quot;&quot;): BsonDocument	
count	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.6.2/anonimongo/dbops/aggregation.html#count,Database[AsyncSocket],string,int,int,string	aggregation: count(db: Database[AsyncSocket]; coll: string; query = bson(); limit = 0;\n      skip = 0; hint = bsonNull(); readConcern = bsonNull();\n      collation = bsonNull(); explain = &quot;&quot;): Future[BsonDocument]	
`distinct`	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.6.2/anonimongo/dbops/aggregation.html#distinct,Database[Socket],string,string,string	aggregation: `distinct`(db: Database[Socket]; coll, key: string; query = bson();\n           readConcern = bsonNull(); collation = bsonNull(); explain = &quot;&quot;): BsonDocument	
`distinct`	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.6.2/anonimongo/dbops/aggregation.html#distinct,Database[AsyncSocket],string,string,string	aggregation: `distinct`(db: Database[AsyncSocket]; coll, key: string; query = bson();\n           readConcern = bsonNull(); collation = bsonNull(); explain = &quot;&quot;): Future[\n    BsonDocument]	
mapReduce	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.6.2/anonimongo/dbops/aggregation.html#mapReduce,Database[Socket],string,BsonJs,BsonJs,BsonBase,int	aggregation: mapReduce(db: Database[Socket]; coll: string; map, reduce: BsonJs;\n          out: BsonBase; query = bson(); sort = bsonNull(); limit = 0;\n          finalize = bsonNull(); scope = bsonNull(); jsMode = false;\n          verbose = false; bypass = false; collation = bsonNull();\n          wt = bsonNull()): BsonDocument	
mapReduce	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.6.2/anonimongo/dbops/aggregation.html#mapReduce,Database[AsyncSocket],string,BsonJs,BsonJs,BsonBase,int	aggregation: mapReduce(db: Database[AsyncSocket]; coll: string; map, reduce: BsonJs;\n          out: BsonBase; query = bson(); sort = bsonNull(); limit = 0;\n          finalize = bsonNull(); scope = bsonNull(); jsMode = false;\n          verbose = false; bypass = false; collation = bsonNull();\n          wt = bsonNull()): Future[BsonDocument]	
geoSearch	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.6.2/anonimongo/dbops/aggregation.html#geoSearch,Database[Socket],string,BsonDocument,seq[BsonDocument],int,int	aggregation: geoSearch(db: Database[Socket]; coll: string; search: BsonDocument;\n          near: seq[BsonDocument]; maxDistance = 0; limit = 0;\n          readConcern = bsonNull()): BsonDocument	
geoSearch	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.6.2/anonimongo/dbops/aggregation.html#geoSearch,Database[AsyncSocket],string,BsonDocument,seq[BsonDocument],int,int	aggregation: geoSearch(db: Database[AsyncSocket]; coll: string; search: BsonDocument;\n          near: seq[BsonDocument]; maxDistance = 0; limit = 0;\n          readConcern = bsonNull()): Future[BsonDocument]	
