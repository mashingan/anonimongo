Diagnostics Commands	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/dbops/diagnostic.html#diagnostics-commands	 Diagnostics Commands	
buildInfo	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/dbops/diagnostic.html#buildInfo,Database	diagnostic: buildInfo(db: Database): Future[BsonDocument]	
collStats	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/dbops/diagnostic.html#collStats,Database,string,int	diagnostic: collStats(db: Database; coll: string; scale = 1024): Future[BsonDocument]	
connPoolStats	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/dbops/diagnostic.html#connPoolStats,Database	diagnostic: connPoolStats(db: Database): Future[BsonDocument]	
connectionStatus	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/dbops/diagnostic.html#connectionStatus,Database	diagnostic: connectionStatus(db: Database; showPriv = false): Future[BsonDocument]	
dataSize	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/dbops/diagnostic.html#dataSize,Database,string	diagnostic: dataSize(db: Database; coll: string; pattern = bson({&quot;_id&quot;: 1}); min = bson();\n         max = bson(); estimate = false): Future[BsonDocument]	
dbHash	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/dbops/diagnostic.html#dbHash,Database,seq[string]	diagnostic: dbHash(db: Database; colls: seq[string] = @[]): Future[BsonDocument]	
dbStats	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/dbops/diagnostic.html#dbStats,Database,int	diagnostic: dbStats(db: Database; scale = 1024): Future[BsonDocument]	
explain	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/dbops/diagnostic.html#explain,Database,string	diagnostic: explain(db: Database; cmd = bson(); verbosity = &quot;allPlansExecution&quot;;\n        command = ckRead): Future[BsonDocument]	
getCmdLineOpts	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/dbops/diagnostic.html#getCmdLineOpts,Database	diagnostic: getCmdLineOpts(db: Database): Future[BsonDocument]	
getLog	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/dbops/diagnostic.html#getLog,Database,string	diagnostic: getLog(db: Database; filter = &quot;global&quot;): Future[BsonDocument]	
getLogFilters	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/dbops/diagnostic.html#getLogFilters,Database	diagnostic: getLogFilters(db: Database): Future[seq[string]]	
hostInfo	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/dbops/diagnostic.html#hostInfo,Database	diagnostic: hostInfo(db: Database): Future[BsonDocument]	
listCommands	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/dbops/diagnostic.html#listCommands,Database	diagnostic: listCommands(db: Database): Future[BsonDocument]	
ping	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/dbops/diagnostic.html#ping,Database	diagnostic: ping(db: Database): Future[BsonDocument]	
profile	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/dbops/diagnostic.html#profile,Database,int,int,float	diagnostic: profile(db: Database; level = 0; slowms = 100; sampleRate = 1.0): Future[\n    BsonDocument]	
serverStat	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/dbops/diagnostic.html#serverStat,Database	diagnostic: serverStat(db: Database): Future[BsonDocument]	
shardConnPoolStats	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/dbops/diagnostic.html#shardConnPoolStats,Database	diagnostic: shardConnPoolStats(db: Database): Future[BsonDocument]	
top	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/dbops/diagnostic.html#top,Database	diagnostic: top(db: Database): Future[BsonDocument]	
validate	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.5.3/anonimongo/dbops/diagnostic.html#validate,Database,string	diagnostic: validate(db: Database; coll: string; full = false): Future[BsonDocument]	
