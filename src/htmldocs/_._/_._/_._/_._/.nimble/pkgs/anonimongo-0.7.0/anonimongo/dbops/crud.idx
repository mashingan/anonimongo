find	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.7.0/anonimongo/dbops/crud.html#find,Database[Socket],string,int,int,int,string,int,string	crud: find(db: Database[Socket]; coll: string; query = bson(); sort = bsonNull();\n     selector = bsonNull(); hint = bsonNull(); skip = 0; limit = 0;\n     batchSize = 101; singleBatch = false; comment = &quot;&quot;; maxTimeMS = 0;\n     readConcern = bsonNull(); max = bsonNull(); min = bsonNull();\n     returnKey = false; showRecordId = false; tailable = false;\n     awaitData = false; oplogReplay = false; noCursorTimeout = false;\n     partial = false; collation = bsonNull(); explain = &quot;&quot;): BsonDocument	
find	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.7.0/anonimongo/dbops/crud.html#find,Database[AsyncSocket],string,int,int,int,string,int,string	crud: find(db: Database[AsyncSocket]; coll: string; query = bson(); sort = bsonNull();\n     selector = bsonNull(); hint = bsonNull(); skip = 0; limit = 0;\n     batchSize = 101; singleBatch = false; comment = &quot;&quot;; maxTimeMS = 0;\n     readConcern = bsonNull(); max = bsonNull(); min = bsonNull();\n     returnKey = false; showRecordId = false; tailable = false;\n     awaitData = false; oplogReplay = false; noCursorTimeout = false;\n     partial = false; collation = bsonNull(); explain = &quot;&quot;): Future[BsonDocument]	
getMore	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.7.0/anonimongo/dbops/crud.html#getMore,Database[Socket],int64,string,int,int	crud: getMore(db: Database[Socket]; cursorId: int64; collname: string; batchSize: int;\n        maxTimeMS = -1): BsonDocument	
getMore	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.7.0/anonimongo/dbops/crud.html#getMore,Database[AsyncSocket],int64,string,int,int	crud: getMore(db: Database[AsyncSocket]; cursorId: int64; collname: string;\n        batchSize: int; maxTimeMS = -1): Future[BsonDocument]	
insert	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.7.0/anonimongo/dbops/crud.html#insert,Database[Socket],string,seq[BsonDocument],string	crud: insert(db: Database[Socket]; coll: string; documents: seq[BsonDocument];\n       ordered = true; wt = bsonNull(); bypass = false; explain = &quot;&quot;): BsonDocument	
insert	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.7.0/anonimongo/dbops/crud.html#insert,Database[AsyncSocket],string,seq[BsonDocument],string	crud: insert(db: Database[AsyncSocket]; coll: string; documents: seq[BsonDocument];\n       ordered = true; wt = bsonNull(); bypass = false; explain = &quot;&quot;): Future[\n    BsonDocument]	
delete	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.7.0/anonimongo/dbops/crud.html#delete,Database[Socket],string,seq[BsonDocument],string	crud: delete(db: Database[Socket]; coll: string; deletes: seq[BsonDocument];\n       ordered = true; wt = bsonNull(); explain = &quot;&quot;): BsonDocument	
delete	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.7.0/anonimongo/dbops/crud.html#delete,Database[AsyncSocket],string,seq[BsonDocument],string	crud: delete(db: Database[AsyncSocket]; coll: string; deletes: seq[BsonDocument];\n       ordered = true; wt = bsonNull(); explain = &quot;&quot;): Future[BsonDocument]	
update	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.7.0/anonimongo/dbops/crud.html#update,Database[Socket],string,seq[BsonDocument],string	crud: update(db: Database[Socket]; coll: string; updates: seq[BsonDocument];\n       ordered = true; wt = bsonNull(); bypass = false; explain = &quot;&quot;): BsonDocument	
update	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.7.0/anonimongo/dbops/crud.html#update,Database[AsyncSocket],string,seq[BsonDocument],string	crud: update(db: Database[AsyncSocket]; coll: string; updates: seq[BsonDocument];\n       ordered = true; wt = bsonNull(); bypass = false; explain = &quot;&quot;): Future[\n    BsonDocument]	
findAndModify	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.7.0/anonimongo/dbops/crud.html#findAndModify,Database[Socket],string,seq[BsonDocument],string	crud: findAndModify(db: Database[Socket]; coll: string; query = bson();\n              sort = bsonNull(); remove = false; update = bsonNull();\n              new = false; fields = bsonNull(); upsert = false; bypass = false;\n              wt = bsonNull(); collation = bsonNull();\n              arrayFilters: seq[BsonDocument] = @[]; explain = &quot;&quot;): BsonDocument	
findAndModify	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.7.0/anonimongo/dbops/crud.html#findAndModify,Database[AsyncSocket],string,seq[BsonDocument],string	crud: findAndModify(db: Database[AsyncSocket]; coll: string; query = bson();\n              sort = bsonNull(); remove = false; update = bsonNull();\n              new = false; fields = bsonNull(); upsert = false; bypass = false;\n              wt = bsonNull(); collation = bsonNull();\n              arrayFilters: seq[BsonDocument] = @[]; explain = &quot;&quot;): Future[\n    BsonDocument]	
getLastError	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.7.0/anonimongo/dbops/crud.html#getLastError,Database[Socket]	crud: getLastError(db: Database[Socket]; opt = bson()): BsonDocument	
getLastError	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.7.0/anonimongo/dbops/crud.html#getLastError,Database[AsyncSocket]	crud: getLastError(db: Database[AsyncSocket]; opt = bson()): Future[BsonDocument]	
Query and Write Operation Commands	_._/_._/_._/_._/.nimble/pkgs/anonimongo-0.7.0/anonimongo/dbops/crud.html#query-and-write-operation-commands	 Query and Write Operation Commands	
