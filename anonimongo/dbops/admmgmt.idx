Administration Commands	anonimongo/dbops/admmgmt.html#administration-commands	 Administration Commands	
create	anonimongo/dbops/admmgmt.html#create,Database,string,(bool, int, int),string,string,string,int	admmgmt: create(db: Database; name: string; capsizemax = (false, 0, 0);\n       storageEngine = bsonNull(); validator = bsonNull();\n       validationLevel = &quot;strict&quot;; validationAction = &quot;error&quot;;\n       indexOptionDefaults = bsonNull(); viewOn = &quot;&quot;; pipeline = bsonArray();\n       collation = bsonNull(); writeConcern = bsonNull();\n       expireAfterSeconds = 0; timeseries = bsonNull()): Future[WriteResult]	
createIndexes	anonimongo/dbops/admmgmt.html#createIndexes,Database,string,BsonBase	admmgmt: createIndexes(db: Database; coll: string; indexes: BsonBase;\n              writeConcern = bsonNull(); commitQuorum = bsonNull();\n              comment = bsonNull()): Future[WriteResult]	
dropCollection	anonimongo/dbops/admmgmt.html#dropCollection,Database,string	admmgmt: dropCollection(db: Database; coll: string; wt = bsonNull(); comment = bsonNull()): Future[\n    WriteResult]	
dropDatabase	anonimongo/dbops/admmgmt.html#dropDatabase,Database	admmgmt: dropDatabase(db: Database; wt = bsonNull(); comment = bsonNull()): Future[\n    WriteResult]	
dropIndexes	anonimongo/dbops/admmgmt.html#dropIndexes,Database,string,BsonBase	admmgmt: dropIndexes(db: Database; coll: string; indexes: BsonBase; wt = bsonNull();\n            comment = bsonNull()): Future[WriteResult]	
listCollections	anonimongo/dbops/admmgmt.html#listCollections,Database,string	admmgmt: listCollections(db: Database; dbname = &quot;&quot;; filter = bsonNull();\n                nameonly = false; authorizedCollections = false;\n                comment = bsonNull()): Future[seq[BsonBase]]	
listCollectionNames	anonimongo/dbops/admmgmt.html#listCollectionNames,Database,string	admmgmt: listCollectionNames(db: Database; dbname = &quot;&quot;): Future[seq[string]]	
listDatabases	anonimongo/dbops/admmgmt.html#listDatabases	admmgmt: listDatabases(db: Mongo | Database; filter = bsonNull(); nameonly = false;\n              authorizedCollections = false; comment = bsonNull()): Future[\n    seq[BsonBase]]	
listDatabaseNames	anonimongo/dbops/admmgmt.html#listDatabaseNames	admmgmt: listDatabaseNames(db: Mongo | Database): Future[seq[string]]	
listIndexes	anonimongo/dbops/admmgmt.html#listIndexes,Database,string	admmgmt: listIndexes(db: Database; coll: string; comment = bsonNull()): Future[\n    seq[BsonBase]]	
renameCollection	anonimongo/dbops/admmgmt.html#renameCollection,Database,string,string	admmgmt: renameCollection(db: Database; from, to: string; wt = bsonNull();\n                 comment = bsonNull()): Future[WriteResult]	
shutdown	anonimongo/dbops/admmgmt.html#shutdown,,int	admmgmt: shutdown(db: Mongo | Database; force = false; timeout = 10; comment = bsonNull()): Future[\n    WriteResult]	
currentOp	anonimongo/dbops/admmgmt.html#currentOp,Database	admmgmt: currentOp(db: Database; opt = bson()): Future[BsonDocument]	
killOp	anonimongo/dbops/admmgmt.html#killOp,Database,int32	admmgmt: killOp(db: Database; opid: int32; comment = bsonNull()): Future[WriteResult]	
killCursors	anonimongo/dbops/admmgmt.html#killCursors,Database,string,seq[int64]	admmgmt: killCursors(db: Database; collname: string; cursorIds: seq[int64]): Future[\n    BsonDocument]	
setDefaultRWConcern	anonimongo/dbops/admmgmt.html#setDefaultRWConcern,Database	admmgmt: setDefaultRWConcern(db: Database; defaultReadConcern = bsonNull();\n                    defaultWriteConcern = bsonNull(); wt = bsonNull();\n                    comment = bsonNull()): Future[BsonDocument]	
getDefaultReadConcern	anonimongo/dbops/admmgmt.html#getDefaultReadConcern,Database	admmgmt: getDefaultReadConcern(db: Database; inMemory = false; comment = bsonNull()): Future[\n    BsonDocument]	
