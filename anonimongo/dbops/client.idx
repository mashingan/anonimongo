Client module and User Management Commands	anonimongo/dbops/client.html#client-module-and-user-management-commands	 Client module and User Management Commands	
anonimongoVersion	anonimongo/dbops/client.html#anonimongoVersion	client: anonimongoVersion	
connect	anonimongo/dbops/client.html#connect,Mongo	client: connect(m: Mongo): Future[bool]	
createUser	anonimongo/dbops/client.html#createUser,Database,string,string	client: createUser(db: Database; user, pwd: string; roles = bsonArray();\n           restrictions = bsonArray();\n           mechanism = bsonArray(&quot;SCRAM-SHA-256&quot;, &quot;SCRAM-SHA-1&quot;);\n           writeConcern = bsonNull(); customData = bsonNull()): Future[\n    WriteResult]	
updateUser	anonimongo/dbops/client.html#updateUser,Database,string,string	client: updateUser(db: Database; user, pwd: string; roles = bsonArray();\n           restrictions = bsonArray();\n           mechanism = bsonArray(&quot;SCRAM-SHA-256&quot;, &quot;SCRAM-SHA-1&quot;);\n           writeConcern = bsonNull(); customData = bsonNull()): Future[\n    WriteResult]	
usersInfo	anonimongo/dbops/client.html#usersInfo,Database,BsonBase	client: usersInfo(db: Database; usersInfo: BsonBase; showCredentials = false;\n          showPrivileges = false; showAuthenticationRestictions = false;\n          filters = bson(); comment = bsonNull()): Future[BsonDocument]	
dropAllUsersFromDatabase	anonimongo/dbops/client.html#dropAllUsersFromDatabase,Database	client: dropAllUsersFromDatabase(db: Database): Future[WriteResult]	
dropUser	anonimongo/dbops/client.html#dropUser,Database,string	client: dropUser(db: Database; user: string): Future[WriteResult]	
grantRolesToUser	anonimongo/dbops/client.html#grantRolesToUser,Database,string	client: grantRolesToUser(db: Database; user: string; roles = bsonArray();\n                 writeConcern = bsonNull()): Future[WriteResult]	
revokeRolesFromUser	anonimongo/dbops/client.html#revokeRolesFromUser,Database,string	client: revokeRolesFromUser(db: Database; user: string; roles = bsonArray();\n                    writeConcern = bsonNull()): Future[WriteResult]	
