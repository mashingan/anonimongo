poolconn	anonimongo/core/types.html#poolconn	types: poolconn	
verbose	anonimongo/core/types.html#verbose	types: verbose	
verifypeer	anonimongo/core/types.html#verifypeer	types: verifypeer	
cafile	anonimongo/core/types.html#cafile	types: cafile	
MongoConn	anonimongo/core/types.html#MongoConn	types: MongoConn	
Mongo	anonimongo/core/types.html#Mongo	types: Mongo	
ReadPreference	anonimongo/core/types.html#ReadPreference	types: ReadPreference	
SslInfo	anonimongo/core/types.html#SslInfo	types: SslInfo	
Database	anonimongo/core/types.html#Database	types: Database	
Collection	anonimongo/core/types.html#Collection	types: Collection	
Cursor	anonimongo/core/types.html#Cursor	types: Cursor	
Query	anonimongo/core/types.html#Query	types: Query	
wkSingle	anonimongo/core/types.html#wkSingle	WriteKind.wkSingle	
wkMany	anonimongo/core/types.html#wkMany	WriteKind.wkMany	
WriteKind	anonimongo/core/types.html#WriteKind	types: WriteKind	
WriteResult	anonimongo/core/types.html#WriteResult	types: WriteResult	
BulkResult	anonimongo/core/types.html#BulkResult	types: BulkResult	
GridFS	anonimongo/core/types.html#GridFS	types: GridFS	
ckWrite	anonimongo/core/types.html#ckWrite	CommandKind.ckWrite	
ckRead	anonimongo/core/types.html#ckRead	CommandKind.ckRead	
CommandKind	anonimongo/core/types.html#CommandKind	types: CommandKind	
MongoError	anonimongo/core/types.html#MongoError	types: MongoError	
MultiUri	anonimongo/core/types.html#MultiUri	types: MultiUri	
MongoUri	anonimongo/core/types.html#MongoUri	types: MongoUri	
initSslInfo	anonimongo/core/types.html#initSslInfo,string,string	types: initSslInfo(keyfile, certfile: string; prot = protSSLv23): SslInfo	
newMongo	anonimongo/core/types.html#newMongo,string,int	types: newMongo(host = &quot;localhost&quot;; port = 27017; master = true; poolconn = poolconn;\n         sslinfo = SslInfo(); ssl = defined(ssl)): Mongo	
newMongo	anonimongo/core/types.html#newMongo,MongoUri,string,int	types: newMongo(muri: MongoUri; poolconn = poolconn; dnsserver = &quot;8.8.8.8&quot;;\n         dnsport = 53): Mongo	
newMongo	anonimongo/core/types.html#newMongo,Uri	types: newMongo(uri: Uri; poolconn = poolconn): Mongo	
tls	anonimongo/core/types.html#tls,Mongo	types: tls(m: Mongo): bool	
authenticated	anonimongo/core/types.html#authenticated,Mongo	types: authenticated(m: Mongo): bool	
authenticated	anonimongo/core/types.html#authenticated,MongoConn	types: authenticated(m: MongoConn): bool	
host	anonimongo/core/types.html#host,MongoConn	types: host(m: MongoConn): string	
port	anonimongo/core/types.html#port,MongoConn	types: port(m: MongoConn): Port	
query	anonimongo/core/types.html#query,Mongo	types: query(m: Mongo): lent TableRef[string, seq[string]]	
flags	anonimongo/core/types.html#flags,Mongo	types: flags(m: Mongo): QueryFlags	
main	anonimongo/core/types.html#main,Mongo	types: main(m: Mongo): MongoConn	
mainPreferred	anonimongo/core/types.html#mainPreferred,Mongo	types: mainPreferred(m: Mongo): MongoConn	
secondary	anonimongo/core/types.html#secondary,Mongo	types: secondary(m: Mongo): MongoConn	
secondaryPreferred	anonimongo/core/types.html#secondaryPreferred,Mongo	types: secondaryPreferred(m: Mongo): MongoConn	
hasUserAuth	anonimongo/core/types.html#hasUserAuth,Mongo	types: hasUserAuth(m: Mongo): bool	
authenticate	anonimongo/core/types.html#authenticate,Mongo,string,string	types: authenticate[T: SHA1Digest | SHA256Digest](m: Mongo; user, pass: string): Future[\n    bool]	
authenticate	anonimongo/core/types.html#authenticate,Mongo	types: authenticate[T: SHA1Digest | SHA256Digest](m: Mongo): Future[bool]	
appname=	anonimongo/core/types.html#appname=,Mongo,string	types: appname=(m: Mongo; name: string)	
appname	anonimongo/core/types.html#appname,Mongo	types: appname(m: Mongo): string	
username	anonimongo/core/types.html#username,Mongo	types: username(m: Mongo): string	
tailableCursor	anonimongo/core/types.html#tailableCursor,Mongo	types: tailableCursor(m: Mongo)	
noTailable	anonimongo/core/types.html#noTailable,Mongo	types: noTailable(m: Mongo)	
isTailable	anonimongo/core/types.html#isTailable,Mongo	types: isTailable(m: Mongo): bool	
slaveOk	anonimongo/core/types.html#slaveOk,Mongo	types: slaveOk(m: Mongo)	
noSlave	anonimongo/core/types.html#noSlave,Mongo	types: noSlave(m: Mongo)	
`[]`	anonimongo/core/types.html#[],Mongo,string	types: `[]`(m: Mongo; name: string): Database	
`[]`	anonimongo/core/types.html#[],Database,string	types: `[]`(dbase: Database; name: string): Collection	
dbname	anonimongo/core/types.html#dbname,Cursor	types: dbname(cur: Cursor): string	
collname	anonimongo/core/types.html#collname,Cursor	types: collname(cur: Cursor): string	
close	anonimongo/core/types.html#close,Mongo	types: close(m: Mongo)	
initQuery	anonimongo/core/types.html#initQuery,Collection,int32,int32,int32	types: initQuery(query = bson(); collection: Collection = nil; skip = 0&apos;i32;\n          limit = 0&apos;i32; batchSize = 101&apos;i32): Query	
